{"version":3,"names":[],"mappings":"","sources":["js/app/api.js"],"sourcesContent":["var api = {\r\n    contentID :'global-content',\r\n    modalContentID: 'global-popups',\r\n    requestData:{},//用来保存之前旧版本通过地址栏直接发送的数据\r\n    basePath: GloConfig.basePath,\r\n    apiSecretKey:'1234567890abcdefghijklmnopqrstuvwxyz',\r\n    removeEventNS:'.curr_event',\r\n    curr:{},//用于存储当前页面的数据\r\n    route:{\r\n        //默认的设置\r\n        'default':{\r\n            path : 'login',//如果lacation.hash为空 默认加载的页面\r\n        },\r\n        'login':{\r\n            title:'首页',\r\n            menuID:'global_menu_login',\r\n            html:'html/module/login/login.html',\r\n            js:['js/module/login/login.js']\r\n        }\r\n    },\r\n    //全局的弹出框 只负责加载相关页面以及 js\r\n    //通过 app.modal.exec(id,fn)来调用 如果页面中不存在 则会进行加载 @see app.modal.exec\r\n    //show方法 执行顺序为 加载hmtl 加载js 执行fun 如果fun函数不存在 则加载后执行$('#id').show()\r\n    modal:{\r\n        \r\n    }\r\n\r\n};\r\n\r\n$(function(){\r\n    //当前文件的路径\r\n    var _filePath = api.basePath;\r\n\tif(GloConfig.packageType == \"s\"){\r\n\t\t_filePath += 'js/index.js';\r\n\t} else {\r\n\t\t_filePath += 'js/index.min.js';\r\n\t}\r\n\r\n    api.findCurrPath = function(){\r\n        var path = null;\r\n        var scripts = document.getElementsByTagName('script');\r\n        for (var n = scripts.length-1; n>-1; n--) {\r\n            var src = scripts[n].src.replace(/\\?.*$/, ''); // 去掉查询字段\r\n            console.log(\"path:::::\", src);\r\n            if (src.indexOf(_filePath) == (src.length - _filePath.length)) {\r\n                path = src.substring(0, src.length - _filePath.length);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(path && path.lastIndexOf('/') != path.length-1) path += '/';\r\n        \r\n        console.log(\"path:::::\", path);\r\n        \r\n        return path;\r\n    };\r\n\r\n    /**\r\n     * 当前访问的地址\r\n     */\r\n    api.LOCALPATH = (function(){\r\n        return api.findCurrPath();\r\n    })();\r\n\r\n    console.log(api.LOCALPATH);\r\n\r\n    /**\r\n     * 获取当前操作系统版本\r\n     */\r\n    api.OS = {\r\n        Android:'Android',\r\n        BlackBerry:'BlackBerry',\r\n        iOS:'iOS',\r\n        Windows : 'Windows',\r\n        MacOS :'MacOS',\r\n        WindowsMobile:'WindowsMobile',\r\n        Other: 'Other',\r\n        _Android : function() {\r\n            return navigator.userAgent.match(/Android/i) ? true : false;\r\n        },\r\n        _BlackBerry : function() {\r\n            return navigator.userAgent.match(/BlackBerry/i) ? true : false;\r\n        },\r\n        _iOS : function() {\r\n            return navigator.userAgent.match(/iPhone|iPad|iPod/i) ? true : false;\r\n        },\r\n        _Windows : function(){\r\n            return navigator.userAgent.match(/Windows NT/i) ? true : false;\r\n        },\r\n        _MacOS : function(){\r\n            return navigator.userAgent.match(/Macintosh/i) ? true : false;\r\n        },\r\n        _WindowsMobile : function() {\r\n            return navigator.userAgent.match(/IEMobile/i) ? true : false;\r\n        },\r\n        is:function(name){\r\n            if(name){\r\n                return this['_'+name]();\r\n            }else{\r\n                return (this._Android() && this.Android) || (this._BlackBerry() && this.BlackBerry) || (this._iOS() && this.iOS) || (this._WindowsMobile() && this.WindowsMobile) || (this._Windows() && this.Windows) || (this._MacOS() && this.MacOS) || this.Other;\r\n            }\r\n        }\r\n    }\r\n    //当前运行环境为 APP 或 浏览器\r\n    api._deviceVersion = (function(){\r\n        //安卓APP 和 IOS APP中增加了自定义UA 用于识别当前的版本\r\n        //其中安卓UA为 JQuery_ANDROID_APP/1.0 1.0为版本号\r\n        //IOS UA为 JQuery_IOS_APP/1.0\r\n        var reData = {};\r\n        var match = navigator.userAgent.match('JQuery_([\\\\w]+)_APP/([\\\\d.]+)');\r\n        if(match){\r\n            reData.device = match[1] == 'IOS' ? api.OS.iOS : api.OS.Android;\r\n            reData.version = match[2];\r\n        }else{\r\n            reData.device = 'Browser';\r\n            reData.version = '0'\r\n        }\r\n\r\n        return reData;\r\n    })();\r\n\r\n    //当前操作系统\r\n    api.device = api.OS.is();\r\n    api.client = 'Browser';\r\n    //如果是封壳的APP 则 修改值\r\n    if(api._deviceVersion.device == api.OS.iOS || api._deviceVersion.device ==  api.OS.Android){\r\n        api.device = api._deviceVersion.device;\r\n        api.client = 'WebApp';\r\n        api.WebAppVersion = api._deviceVersion.version\r\n    }\r\n\r\n    /**\r\n     * 判断当前环境是否是APP\r\n     */\r\n    api.isApp = function(){\r\n        return app.client != 'Browser';\r\n    }\r\n\r\n    /**\r\n     * 判断当前是否为Android APP\r\n     */\r\n    api.isAndroidApp = function(){\r\n        return api.client == 'WebApp' && api.device == api.OS.Android;\r\n    }\r\n\r\n    /**\r\n     * 判断当前是否为iOS APP\r\n     * @returns {boolean}\r\n     */\r\n    api.isIOSApp = function(){\r\n        return api.client == 'WebApp' && api.device == api.OS.iOS;\r\n    }\r\n\r\n    //控制全局loading\r\n    //show hide 方法可接受一个id值 默认值为 global 列表中所有id的loading全部被隐藏后 loading才会隐藏\r\n    api.globalLoading = {\r\n        _times: 0,\r\n        _list:{},\r\n        _hide:function(){\r\n            this._list = {};\r\n            $('#global-loading-shadow').hide();\r\n        },\r\n        hide:function(id){\r\n            console.trace('隐藏全局Loading'+ (id ? (',id:' + id) : '') );\r\n            id = id || 'global';\r\n            if(this._list[id]){\r\n                this._times = Math.max(this._times - 1,0);\r\n                this._list[id] = null;\r\n            }\r\n\r\n            if(this._times === 0){\r\n                $('#global-loading-shadow').hide();\r\n            }\r\n        },\r\n        show:function(id){\r\n            console.trace('显示全局Loading'+ (id ? (',id:' + id) : '' ) );\r\n            id = id || 'global';\r\n            if(!this._list[id]){\r\n                this._times = Math.max(this._times,0) + 1;\r\n                this._list[id] = true;\r\n            }\r\n            $('#global-loading-shadow').show();\r\n        }\r\n    }\r\n\r\n    //控制全局shadow\r\n    api.globalShadow = {\r\n        _times: 0,\r\n        _list:{},\r\n        _hide:function(){\r\n            this._list = {};\r\n            $('#global-shadow').css('z-index','2000').hide();\r\n        },\r\n        hide:function(id){\r\n            if(this._list[id]){\r\n                this._times = Math.max(this._times - 1,0);\r\n                this._list[id] = null;\r\n            }\r\n\r\n            var _arr = [];\r\n            for(var key in this._list){\r\n                _arr.push(this._list[key]);\r\n            }\r\n            $('#global-shadow').css('z-index',Math.max.apply(null,_arr))\r\n\r\n            if(this._times === 0){\r\n                $('#global-shadow').css('z-index','2000').hide();\r\n            }\r\n        },\r\n        show:function(id){\r\n            if(!this._list[id]){\r\n                this._times = Math.max(this._times,0) + 1;\r\n                this._list[id] = ($('#'+id).css('z-index') || 2000);\r\n\r\n                if($('#'+id).length > 0){\r\n                    $('#global-shadow').css('z-index',this._list[id] - 1);\r\n                }\r\n            }\r\n            $('#global-shadow').show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 执行相应id的 弹框的函数\r\n     * @param id 上面配置的 modal的id\r\n     * @param fn 字符串 调用modal中相应地方法(modal[fn]) 如果有第三个参数作为modal.fn的参数传入 多个参数请使用数组\r\n     *           数组   依次调用modal中的相应方法或者数组元素本身即为函数 并将后续参数依次作为参数传入\r\n     *           函数   直接执行 第三个参数作为该函数的参数\r\n     *           空值   执行modal.show函数 如果不存在 执行 $('#id').show()\r\n     * @params 从第三个参数开始 每个参数 依次作为第二个参数中的函数的参数\r\n     * 例:\r\n     * id为 test modal中函数定义为\r\n     * modal.init = function(index,cleanFun){};\r\n     * modal.test = function(a,b,c);\r\n     * 则调用时使用\r\n     * app.modal.exec('test',['init','test'],[index,cleanFun],[a,b,c])\r\n     */\r\n    api.modal.exec = function(id,fn/*data*/){\r\n        //取得参数列表\r\n        var _args = Array.prototype.slice.call(arguments,2);\r\n\r\n        api.loadModal(id,function(loadData){\r\n            if(loadData.flag && api.modal[id]){\r\n                if(fn){//如果fn 参数存在 则执行\r\n                    if(!$.isArray(fn)) fn = [fn];\r\n                    //依次执行函数\r\n                    for(var i=0;i<fn.length;i++){\r\n                        var _fn = fn[i];\r\n                        if(typeof _fn == 'string' && typeof api.modal[id][_fn] == 'function'){\r\n                            api.modal[id][_fn].apply(api.modal[id],args(i));\r\n                        }else if(typeof _fn == 'function'){\r\n                            fn.apply(api.modal[id],args(i));\r\n                        }\r\n                    }\r\n                }else if(api.modal[id].show){//fn不存在 show存在 则执行\r\n                    api.modal[id].show();\r\n                }else{//以上均不存在 则直接显示\r\n                    $('#'+id).show();\r\n                }\r\n            }\r\n        });\r\n\r\n        function args(index){\r\n            if(index > _args.length - 1){\r\n                return null;\r\n            }else{\r\n                var arg = _args[index];\r\n                if(!$.isArray(arg)) arg = [arg];\r\n                return arg;\r\n            };\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 控制页面底部的显示隐藏\r\n     * @type {{hide: Function, show: Function}}\r\n     */\r\n    api.footer = {\r\n        hide:function(){\r\n            $('#mainviewport').addClass('footer-hide');\r\n        },\r\n        show:function(){\r\n            $('#mainviewport').removeClass('footer-hide');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 控制页面头的显示隐藏\r\n     * @type {{hide: Function, show: Function}}\r\n     */\r\n    api.header = {\r\n        hide:function(){\r\n            $('#mainviewport').addClass('header-hide');\r\n        },\r\n        show:function(){\r\n            $('#mainviewport').removeClass('header-hide');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 用于引入js文件\r\n     * @param src js文件路径 可以为字符串或数组\r\n     * @param loadType 0逐个加载 1 同时加载 默认为0\r\n     * @param 加载完成的回调函数 可以为空\r\n     */\r\n    api.loadJS = function(src,loadType,callback){\r\n        //将src放在数组中 便于统一处理\r\n        if(!$.isArray(src)) src = [src];\r\n        var needSrcs = [];\r\n        var haveSrcs = [];\r\n\r\n        //取得当前页面中的所有js标签\r\n        var scripts = document.getElementsByTagName('script');\r\n\r\n        for(var i=0;i<scripts.length;i++){\r\n            haveSrcs.push(scripts[i].src);\r\n        }\r\n\r\n        for(var i=0;i<src.length;i++){\r\n            if(haveSrcs.indexOf(src[i]) == -1) needSrcs.push(src[i]);\r\n        }\r\n\r\n        if(needSrcs.length > 0){\r\n            if(loadType){\r\n                parallelLoad();\r\n            }else{\r\n                serialLoad(0);\r\n            }\r\n        }\r\n\r\n        var _data = {\r\n            flag:1//,加载是否成功标记\r\n        };\r\n\r\n        /**\r\n         * 串行加载\r\n         * @param i\r\n         */\r\n        function serialLoad(i){\r\n            var scriptE = document.createElement('script');\r\n            scriptE.setAttribute('type','text/javascript');\r\n            scriptE.onload = ready;\r\n            scriptE.onerror = ready;\r\n            scriptE.setAttribute('src',needSrcs[i]);\r\n            document.head.appendChild(scriptE);\r\n\r\n            function ready(e){\r\n                if(e.type == 'error'){\r\n                    console.error('[APP] 加载js出错,',e);\r\n                    _data.flag = 0;\r\n                }\r\n                //如果不是最后一个 则继续加载\r\n                if(i != needSrcs.length-1) {\r\n                    serialLoad(i+1);\r\n                }else{\r\n                    if(callback){\r\n                        callback(_data);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 并行加载\r\n         */\r\n        function parallelLoad(){\r\n            var loaded = 0;\r\n            //加载所有js\r\n            for(var i=0;i<needSrcs.length;i++){\r\n                var scriptE = document.createElement('script');\r\n                scriptE.setAttribute('type','text/javascript');\r\n                scriptE.setAttribute('src',api.LOCALPATH+needSrcs[i]);\r\n                scriptE.onload = ready;\r\n                scriptE.onerror = ready;\r\n                document.head.appendChild(scriptE);\r\n            }\r\n\r\n            function ready(e){\r\n                if(e.type == 'error'){\r\n                    _data.flag = 0;\r\n                    console.error('[APP] 加载js出错',e);\r\n                }\r\n                loaded++;\r\n                if(loaded == needSrcs.length){\r\n                    if(callback) callback(_data);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 为元素添加事件或事件委托 会在页面切换时移除添加的事件 接受参数同jquery.on方法\r\n     */\r\n    api._removeEEList = [];//需要移除的事件的元素列表\r\n    $.fn.app_on = function(){\r\n        api._removeEEList.push($(this));\r\n        if(arguments.length > 0){\r\n            arguments[0] = arguments[0].replace(/\\w+/g,'$&'+api.removeEventNS);\r\n        }\r\n        $(this).on.apply($(this),arguments);\r\n\r\n    };\r\n\r\n    /**\r\n     * 加载全局modal弹出框\r\n     * @param modalId\r\n     * @param callback\r\n     */\r\n    api.loadModal = function(modalId,callback){\r\n        var modalData = api.modal[modalId];\r\n        if(!modalData){\r\n            console.error('[APP] [加载modal错误] 没有查找到id为:'+modalId+'的相关配置');\r\n            callback({html:0,js:0,flag:0,modal:modalData});\r\n        }else{\r\n            //已经加载过的modal不再进行加载\r\n            if(modalData.ready){\r\n                callback({html:1,js:1,flag:1,modal:modalData});\r\n            }else{\r\n                console.log('[APP] 开始加载modal:'+modalId);\r\n                $.ajax({\r\n                    url:api.LOCALPATH + api.basePath + modalData.html,\r\n                    dataType:'html',\r\n                    success:function(data){\r\n                        $('#'+api.modalContentID).append(data);\r\n                        if(modalData.js) api.loadJS(api.LOCALPATH + api.basePath + modalData.js,0,function(data){\r\n                            var _data = {\r\n                                html:1,\r\n                                js:data.flag,\r\n                                flag: data.flag,\r\n                                modal:modalData\r\n                            };\r\n                            modalData.ready = true;\r\n                            callback(_data);\r\n                        });\r\n                    },\r\n                    error:function(){\r\n                        console.error('[加载modal错误] 加载路径为:' + modalData.html + '的文件失败');\r\n                        callback({html:0,js:0,flag:0,modal:modalData});\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载指定路径的内容\r\n     * @param path\r\n     * @param callback\r\n     */\r\n    api.loadPath = function(path,callback){\r\n        var route = api.route;\r\n\r\n        //加载HTML\r\n        $('#'+api.contentID).load(api.LOCALPATH + api.basePath + route[path].html,function(){\r\n            //移除上一个页面加载的js\r\n            if(api.curr && api.curr.js){\r\n                api.curr.js.map(function(value){\r\n                    $('script[src=\"'+api.LOCALPATH + api.basePath + value+'\"]').remove();\r\n                });\r\n            }\r\n\r\n            // 如果有需要移除的事件 则依次移\r\n            if(api._removeEEList.length > 0){\r\n                api._removeEEList.map(function(value){\r\n                    value.off(api.removeEventNS);\r\n                });\r\n            }\r\n\r\n            api.curr = route[path];\r\n\r\n            if(api.curr.title) $('#header-title').text(api.curr.title);\r\n\r\n            if(api.curr.hideHeadTitle){\r\n                $('#header-title').text('');\r\n            }else{\r\n                $('#header-title').text(api.curr.title || '');\r\n            }\r\n\r\n            var jsArr = [];\r\n            //如果存在js则遍历增加\r\n            if(api.curr.js){\r\n                api.curr.js.map(function(value){\r\n                    jsArr.push(api.LOCALPATH + api.basePath +  value);\r\n                });\r\n            }else{\r\n                if(callback) callback(api.curr);\r\n            }\r\n\r\n            //加载完成后将页面移动到顶端\r\n            $('#'+api.contentID).scrollTop(0);\r\n\r\n            api.loadJS(jsArr,0,function(){\r\n                if(callback) callback(api.curr);\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 路径发生变化时触发加载页面的操作\r\n     * 如果给出的路径 并没有进行配置 则不进行加载\r\n     * 在加载页面之前会首先执行当前页面定义的 app.curr.clean 方法,以便当前页面在离开以前执行一些操作\r\n     *\r\n     */\r\n    function loadViewport(){\r\n    \tvar path;\r\n    \tif(location.hash.indexOf(\"?\")>-1){\r\n    \t\tpath = location.hash.substr(0,location.hash.indexOf(\"?\"));\r\n    \t}else{\r\n    \t\tpath = location.hash;\r\n    \t}\r\n    \tpath = (path || '#' + api.route.default.path).slice(1);\r\n\r\n        //如果没有配置路径则不做操作\r\n        if(!api.route[path]){\r\n            api.globalLoading.hide();\r\n            console.log('[APP] 没有查询到路径:'+ path + ',不进行加载');\r\n        }else if(api.curr.clean){\r\n            switch(api.curr.clean.length){\r\n                case 0://如果不包含参数 则认为这是一个同步 直接执行完成后 加载页面\r\n                    api.curr.clean();\r\n                    load();\r\n                    break;\r\n                case 1://如果只接收一个参数,则传入回调函数 等待页面完成后自行处理\r\n                    api.curr.clean(load);\r\n                    break;\r\n                case 2://如果接收两个参数 则分别是 要跳转页面的hash,回调函数\r\n                    api.curr.clean(path,load);\r\n                    break;\r\n                default://如果接收大于2个参数 则只传入三个 分别是 要跳转页面的hash,要跳转页面的配置在route中的数据,回调函数\r\n                    api.curr.clean(path,api.route[path],load);\r\n            }\r\n        }else{\r\n            load();\r\n        }\r\n\r\n        function load(){\r\n            api.globalLoading.show();\r\n            console.log('[APP] 开始加载页面['+path+']');\r\n            api.loadPath(path,function(data){\r\n                console.log('[APP] 加载页面<p>['+path+']</p>完成');\r\n\r\n                api.plugins.header(data,path);\r\n\r\n                //如果页面没有设置 则默认隐藏全局loading\r\n                if(!data || !data.selfHideLoading) api.globalLoading.hide();\r\n            });\r\n        }\r\n    }\r\n\r\n    api.loadViewport = loadViewport;\r\n\r\n    /**\r\n     * 当浏览器的hash发生变化时进行页面的加载\r\n     */\r\n    window.onhashchange = loadViewport;\r\n\r\n});\r\n"],"file":"api.js"}