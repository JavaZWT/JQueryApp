{"version":3,"names":[],"mappings":"","sources":["js/app/app.js"],"sourcesContent":["/**\n * 提供一些通用方法\n * @type {{}|*}\n */\njQuery(function(){\n    window.app = window.app || window.api || {};\n\n    //复制全局设置至app变量\n    if(window.GloConfig){\n        for(var key in GloConfig){\n            app[key] = GloConfig[key];\n        }\n    }\n\n    /**\n     * 服务器地址 永远指向当前服务器的地址\n     */\n    app.SERVERPATH = (function(){\n        //if(app.env != 'UI'){\n            //return location.href.indexOf('http') == 0 ? app.LOCALPATH : GloConfig.serverPath;\n        //}else{\n    \tif(api.isApp()||'DEV'==app.env){\n    \t\treturn app.serverPath;\n    \t}else{\n    \t\treturn \"\";\n    \t}\n        //}\n    })();\n\n    /**\n     * 根据分辨率判断当前的设备是否是手机\n     * 在cordova加载后该方法会被重写\n     * @returns {boolean}\n     */\n    app.isPhone = function(){\n        return document.documentElement.clientWidth < 700;\n    };\n\n    /**\n     * 获取html页面连接中的传参\n     * @returns {{}} 返回对象\n     */\n    app.getParams = function(){\n        var data = {};\n        var str = location.search;\n        if(str){\n            str = str.slice(1);\n            dataArr = str.split('&');\n            for(var i=0;i<dataArr.length;i++){\n                var _dataArr = dataArr[i].split('=');\n                data[_dataArr[0]] = _dataArr[1];\n            }\n        }\n        return data;\n    };\n\n    /**\n     * 弹出提示\n     * @param 对象或者字符串 如果为字符串则作为content其他使用默认值 options {\n     * title: 标题 默认 提示\n     * type:1为alert 2为 confirm 默认为1\n     * content: 显示内容\n     * cancleBtnText:取消按钮文字 默认 取消\n     * confirmBtnText:确定按钮文字 默认 确定\n     * cancleAction:点击取消执行的回调函数\n     * confirmAction:点击确定执行的回调函数\n     * }\n     *\n     * @return 弹窗对象{\n     * show:显示弹窗\n     * hide:隐藏\n     * destory:销毁\n     * source:当前弹窗的jquery对象\n     * options:创建弹窗的参数\n     * }\n     */\n    app.popupTipsList = {};\n    app.popupTips = function(options){\n        options._id = options.id;\n        var _popupWin = null;\n        //如果存在相同id的 则不再进行创建直接返回现有弹窗\n        if(options._id && app.popupTipsList[options._id]){\n            _popupWin =  app.popupTipsList[options._id];\n        }else{\n            options.id = 'global-alert-' + (new Date()).getTime() + parseInt(Math.random() * 100);\n            options.cancleBtnId = options.id + '-cancel';\n            options.confirmBtnId = options.id + '-confirm';\n            options = $.extend({\n                title:'提示',\n                cancleBtnText:'取消',\n                confirmBtnText:'确定',\n                type:1,\n            },options);\n\n            if(options.type == 1){\n                options.cancleHide = true;\n            }\n\n            var $popupWin = $('#global-alert').toHtml(options);\n            $('#global-popups').append($popupWin);\n            $popupWin = $('#'+options.id);\n\n            _popupWin = {\n                _destory:0,\n                show:function(){\n                    if(this._destory) return null;\n                    app.globalShadow.show(options.id);\n                    $popupWin.show();\n                    return this;\n                },\n                hide:function(){\n                    if(this._destory) return null;\n                    app.globalShadow.hide(options.id);\n                    $popupWin.hide();\n                    return this;\n                },\n                destory:function(){\n                    if(!this._destory){\n                        if(options._id) app.popupTipsList[options._id] = null;\n                        app.globalShadow.hide(options.id);\n                        $popupWin.remove();\n                        this._destory = 1;\n                    }\n                    return null;\n                },\n                source:$popupWin,\n                options:options\n            }\n\n            if(options._id) app.popupTipsList[options._id] = _popupWin;\n\n            $('#'+options.cancleBtnId).on('click',function(){\n                if(options.cancleAction) options.cancleAction.apply(_popupWin);\n            });\n            $('#'+options.confirmBtnId).on('click',function(){\n                if(options.confirmAction) options.confirmAction.apply(_popupWin);\n            });\n        }\n\n        return _popupWin;\n    }\n\n    /**\n     * alert提示框 同样内容的提示框只会同时存在一个\n     * @param content 提示内容 会自动替换其中的\\n换行符为<br />\n     * @param callback 回调函数\n     * @returns {*}\n     */\n    app.alert = function(content,callback){\n        var _pop = this.popupTips({\n            id:(content!=undefined&&content!=null)?(content.replace(/\\n/g,'<br />')):\"\",\n            content:content.replace(/\\n/g,'<br />'),\n            confirmAction:function(){\n                if(callback) callback();\n                this.destory();\n            }\n        }).show();\n\n        return _pop;\n    }\n\n    /**\n     * confirm提示框\n     * @param content 提示的内容\n     * @param callback 回调函数 回调函数接收参数 0点击的是取消 1点击的是确定\n     * @returns {*}\n     */\n    app.confirm = function(content,callback){\n        var _pop = this.popupTips({\n            content:content.replace(/\\n/g,'<br />'),\n            type:2,\n            cancleAction:function(){\n                if(callback) callback(0);\n                this.destory();\n            },\n            confirmAction:function(){\n                if(callback) callback(1);\n                this.destory();\n            },\n        }).show();\n        return _pop;\n    }\n\n    /**\n     * 根据当前环境跳转至不同的页面\n     */\n    app.devicePath = null;//APP中目录路径 在cordova加载完成后会进行赋值\n    app.toRealURL = function(isLocal,url){\n        //如果在APP 中运行 并且isLocal为1 则跳转至cordova本地路径\n        if(this.client != 'Browser' && isLocal == 1){\n            if(this.devicePath) window.open(this.devicePath + url);\n        }else{\n            location =  this.SERVERPATH + url;\n        };\n    };\n\n    var ajaxConfig = {\n\n    }\n\n    //APP版本 需要加载其他的功能\n    if(app.isApp()){\n        //用户头像保存路径\n        app.userPicUrl = 'cdvfile://localhost/temporary/userPic/userPhoto.jpg';\n        /**\n         * 特殊判断 如果设备型号存在于padList中 则认为是PAD 其他情况仍按照原逻辑处理\n         * @returns {boolean|*}\n         */\n        var padList = ['N5100'];\n        app._isPhone = app.isPhone;\n        app.isPhone = function(){\n            return padList.indexOf(device.model) == -1 && app._isPhone();\n        }\n        //为APP目录赋值\n        app.devicePath = cordova.file.dataDirectory;\n\n        document.addEventListener('backbutton',function(){\n            if(app.curr.back) app.curr.back();\n            else history.back();\n        },false);\n\n        app.deviceID = G.deviceID = device.uuid;\n    }\n\n    /**\n     * 在ajax请求发送前 进行一些处理\n     * @param jqXHR\n     * @param setting\n     */\n    ajaxConfig.beforeSend = function(jqXHR){\n        //如果超过一定时间没有返回 停止请求 同时记录setTime的值\n        if(app.env != 'DEV') jqXHR.appTimeOutID = setTimeout(jqXHR.abort,10*60*1000);\n        if(app.appBeforeSend) app.appBeforeSend(jqXHR);\n    }\n\n    //设置ajax\n    $.ajaxSetup(ajaxConfig);\n\n    //为a标签添加默认事件\n    $('body').on('click','a.no-href',function(e){\n        e.preventDefault();\n    });\n    // 设置jquery ajax完成后的默认操作\n    $(document).ajaxComplete(function(event, xhr) {\n        //请求完成后清除 延迟执行\n        if(xhr.appTimeOutID){\n            clearTimeout(xhr.appTimeOutID);\n        }\n    });\n\n    /**\n     * 通用的 ajax 请求方法 实际为调用 jQuery的ajax 方法\n     * @param options 参数参照jQuery ajax 方法 增加一个属性 onlyJSON 默认为true 直接发送json字符串\n     * @returns {*}\n     */\n    app.ajax = function(options){\n        var globalLoadingID = 'ajax-'+ Date.now() + Math.floor(Math.random() * 1000);\n        app.globalLoading.show(globalLoadingID);\n        //默认的ajax设置\n        var ajaxConfig = {\n            type:'POST',\n            dataType:'json',\n            onlyJSON: false,\n            xhrFields: {\n                withCredentials: true\n            },\n            app_completeUrl:true,//自动拼接URL\n            headers : {\n                'app-client' : app.client,\n                'app-device' : app.device,\n            }\n        }\n        //继承默认设置\n        options = $.extend(ajaxConfig,options);\n        //如果是只发送json 则更改设置\n        if(options.onlyJSON){\n            options.processData = false;\n            options.contentType = 'application/json;charset=UTF-8';\n        }\n\n        //重新设置 回调函数\n        var _error = options.error;\n        var _success = options.success;\n        options.success = success;\n        options.error = error;\n\n        //如果自动完成URL 没有设置为false 则进行拼接\n        if(options.app_completeUrl) options.url = app.SERVERPATH + options.url;\n        //如果为json数据 且 data为对象 则进行转换\n        if(options.contentType == 'application/json;charset=UTF-8' && (typeof options.data == 'object') ) options.data = JSON.stringify(options.data);\n\n        //增加签名\n        var now = new Date().getTime();\n        options.headers['app-time'] = now;\n        G.deviceID = G.deviceID || app.utils.getRandomValue();\n        options.headers['app-deviceID'] = G.deviceID;\n        options.headers['app-sign'] = CryptoJS.HmacSHA1(app.deviceID + now,app.apiSecretKey).toString(CryptoJS.enc.HEX);\n\n\n        function success(data) {\n            app.globalLoading.hide(globalLoadingID);\n            if(!data || data.flag == 0){\n                app.alert( (data && data.error) || '服务器发生错误');\n                if(_success) _success(data);\n            }else if(_success){\n                _success(data);\n            }\n        }\n\n        function error(xhr,state,error){\n            app.globalLoading.hide(globalLoadingID);\n            app.globalLoading.hide();\n            if(xhr.getResponseHeader(\"app-timeout\") == 'true'){\n                app.alert('登录已过期,请重新登录',function(){\n                    location.hash = '';\n                });\n            }else if(_error){\n                _error(xhr,state,error);\n                console.warn('[APP]连接服务器失败\\n状态:',event,'\\nxhr对象:',xhr,'\\n发送使用的设置:',options);\n            }else{\n                app.alert('连接服务器失败');\n                console.warn('[APP]连接服务器失败\\n状态:',event,'\\nxhr对象:',xhr,'\\n发送使用的设置:',options);\n            }\n        }\n\n        return $.ajax(options);\n    }\n})\n"],"file":"app.js"}